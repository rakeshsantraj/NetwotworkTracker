version: "3.9"

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_PORT_NUMBER: 2181
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/bitnami/zookeeper

    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - packet_net

  kafka1:
    image: bitnami/kafka:latest
    container_name: kafka1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      # KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      # KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    volumes:
      - kafka1-data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
    networks:
      - packet_net

  kafka2:
    image: bitnami/kafka:latest
    container_name: kafka2
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"   
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      # KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2     
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      # KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    volumes:
      - kafka2-data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh --bootstrap-server localhost:9093 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
    networks:
      - packet_net

  kafka3:
    image: bitnami/kafka:latest
    container_name: kafka3
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      # KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      # ALLOW_PLAINTEXT_LISTENER: "yes"
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      # KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    volumes:
      - kafka3-data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh --bootstrap-server localhost:9094 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - packet_net

  postgres:
    image: postgres:15-alpine
    container_name: postgresdb
    environment:
      POSTGRES_DB: packetdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: tiger
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - packet_net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d packetdb"]
      interval: 15s
      timeout: 10s
      retries: 10

  packetcaptureproducerservice:
    container_name: packetcaptureproducerservice
    image: ${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/packetcaptureproducerservice:${IMAGE_TAG}
    ports:
      - "8781:8781"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SERVER_PORT: 8781
      KAFKA_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9093,kafka3:9094
      KAFKA_TOPIC: packets1
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - packet_net
    restart: always

  packetcaptureconsumerservice:
    container_name: packetcaptureconsumerservice
    image: ${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/packetcaptureconsumerservice:${IMAGE_TAG}
    ports:
      - "8782:8782"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresdb:5432/packetdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: tiger
      SERVER_PORT: 8782
      KAFKA_BOOTSTRAP_SERVERS: kafka1:9092,kafka2:9093,kafka3:9094
      KAFKA_CONSUMER_GROUP: packet-consumer-group
    depends_on:
      postgres:
        condition: service_healthy
      kafka1:
        condition: service_started
      kafka2:
        condition: service_started
      kafka3:
        condition: service_started
    networks:
      - packet_net
    restart: always

  packetanalyserservice:
    container_name: packetanalyserservice
    image: ${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/packetanalyserservice:${IMAGE_TAG}
    ports:
      - "8783:8783"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresdb:5432/packetdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: tiger
      SERVER_PORT: 8783
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - packet_net
    restart: always

  networkpacketcaptureservice:
    container_name: networkpacketcaptureservice
    image: ${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/networkpacketcaptureservice:${IMAGE_TAG}
    # network_mode: "host"
    cap_add:
      - NET_RAW
      - NET_ADMIN
    ports:
      - "8785:8785"
    environment:
      PRODUCER_URL: http://packetcaptureproducerservice:8781/produce
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - packet_net
    restart: always


  frontend:
    container_name: frontend
    image: ${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/frontend:${IMAGE_TAG}
    ports:
      - "3000:80"
    depends_on:
      - packetcaptureconsumerservice
      - packetcaptureproducerservice
      - packetanalyserservice
      - networkpacketcaptureservice
    networks:
      - packet_net
    restart: always

volumes:
  pgdata:
  kafka1-data:
  kafka2-data:
  kafka3-data:
  zookeeper-data:
  zookeeper-logs:

networks:
  packet_net:
    external: true
