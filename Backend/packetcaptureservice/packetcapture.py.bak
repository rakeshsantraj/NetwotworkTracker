import asyncio
import json
import requests
from scapy.all import sniff, Ether, IP, TCP, UDP, Raw
from threading import Thread
from queue import Queue
from datetime import datetime

# URL of your Spring Boot Producer service
PRODUCER_URL = "http://localhost:8781/produce"

# Shared queue between sniffer and async worker
packet_queue = Queue()

# Headers for JSON POST
headers = {"Content-Type": "application/json"}

# Log file
LOG_FILE = "captured_packets_async.log"


# -------------------------------
# Utility: write logs to file
# -------------------------------
def log_to_file(message: str):
    with open(LOG_FILE, "a") as f:
        f.write(f"{datetime.now()} | {message}\n")


# -------------------------------
# 1. Parse packet into structured dict
# -------------------------------
def packet_to_dict(pkt):
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    data = {
        "timestamp": ts,
        "raw_layers": [],
        "srcIp": None,
        "dstIp": None,
        "protocol": "OTHER",
        "srcPort": None,
        "dstPort": None,
        "payload": None,
        "length": len(bytes(pkt)),
    }

    if Ether in pkt:
        data["raw_layers"].append("Ether")
    if IP in pkt:
        ip = pkt[IP]
        data["raw_layers"].append("IP")
        data["srcIp"] = ip.src
        data["dstIp"] = ip.dst
    if TCP in pkt:
        tcp = pkt[TCP]
        data["raw_layers"].append("TCP")
        data["srcPort"] = tcp.sport
        data["dstPort"] = tcp.dport
        data["protocol"] = "TCP"
    elif UDP in pkt:
        udp = pkt[UDP]
        data["raw_layers"].append("UDP")
        data["srcPort"] = udp.sport
        data["dstPort"] = udp.dport
        data["protocol"] = "UDP"

    if Raw in pkt:
        try:
            payload = pkt[Raw].load.decode("utf-8")
            data["payload"] = payload
        except Exception:
            data["payload"] = None
            data["raw_layers"].append("Raw")

    return data


# -------------------------------
# 2. Callback when packet arrives
# -------------------------------
def handle_packet(pkt):
    try:
        data = packet_to_dict(pkt)
        packet_queue.put(data)
        msg = f"Captured packet → {data}"
        print(msg)
        log_to_file(msg)
    except Exception as e:
        err = f"Error handling packet: {e}"
        print(err)
        log_to_file(err)


# -------------------------------
# 3. Worker: sends packets to Spring Boot Producer
# -------------------------------
async def worker():
    loop = asyncio.get_event_loop()
    while True:
        if not packet_queue.empty():
            packet = packet_queue.get()
            try:
                await loop.run_in_executor(
                    None,
                    lambda: requests.post(PRODUCER_URL, data=json.dumps(packet), headers=headers, timeout=3)
                )
                msg = f" Sent packet → {packet}"
                print(msg)
                log_to_file(msg)
            except Exception as e:
                err = f" Failed to send packet: {e}"
                print(err)
                log_to_file(err)
        await asyncio.sleep(0.1)


# -------------------------------
# 4. Start sniffer in background
# -------------------------------
def start_sniffer():
    sniff(prn=handle_packet, store=False)


# -------------------------------
# 5. Main entry
# -------------------------------
def main():
    sniffer_thread = Thread(target=start_sniffer, daemon=True)
    sniffer_thread.start()
    asyncio.run(worker())


if __name__ == "__main__":
    main()
